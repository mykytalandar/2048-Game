{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.size = 4;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var oldBoard = this.board.map(function(row) {\n                    return row.slice();\n                });\n                if (this.handleGameOver()) return;\n                for(var row = 0; row < this.board.length; row++)this.board[row] = this.mergeX(this.board[row]);\n                if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n                this.updateScore();\n                this.renderBoard(this.board);\n                this.checkWin();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var oldBoard = this.board.map(function(row) {\n                    return row.slice();\n                });\n                if (this.handleGameOver()) return;\n                for(var row = 0; row < this.board.length; row++)this.board[row] = this.mergeX(this.board[row], true);\n                if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n                this.updateScore();\n                this.renderBoard(this.board);\n                this.checkWin();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var oldBoard = this.board.map(function(row) {\n                    return row.slice();\n                });\n                if (this.handleGameOver()) return;\n                this.mergeY(false);\n                if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n                this.updateScore();\n                this.renderBoard(this.board);\n                this.checkWin();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var oldBoard = this.board.map(function(row) {\n                    return row.slice();\n                });\n                if (this.handleGameOver()) return;\n                this.mergeY(true);\n                if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n                this.updateScore();\n                this.renderBoard(this.board);\n                this.checkWin();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.renderBoard(this.board);\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.status = \"playing\";\n                this.score = 0;\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"mergeY\",\n            value: function mergeY() {\n                var _this = this, _loop = function(col) {\n                    var column = [];\n                    for(var row = 0; row < _this.board.length; row++)column.push(_this.board[row][col]);\n                    if (reverse) column.reverse();\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                        column[i] += column[i + 1];\n                        _this.score += column[i];\n                        column[i + 1] = 0;\n                        i++;\n                    }\n                    column = column.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(column.length < _this.size)column.push(0);\n                    if (reverse) column.reverse();\n                    for(var row1 = 0; row1 < _this.size; row1++)_this.board[row1][col] = column[row1];\n                };\n                var reverse = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                for(var col = 0; col < this.board.length; col++)_loop(col);\n            }\n        },\n        {\n            key: \"mergeX\",\n            value: function mergeX(arr) {\n                var reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n                var result = reverse ? arr.slice().reverse() : arr.slice();\n                result = result.filter(function(num) {\n                    return num !== 0;\n                });\n                for(var i = 0; i < result.length - 1; i++)if (result[i] === result[i + 1]) {\n                    result[i] += result[i + 1];\n                    this.score += result[i];\n                    result[i + 1] = 0;\n                    i++;\n                }\n                result = result.filter(function(num) {\n                    return num !== 0;\n                });\n                while(result.length < this.size)result.push(0);\n                if (reverse) result.reverse();\n                return result;\n            }\n        },\n        {\n            key: \"renderBoard\",\n            value: function renderBoard(state) {\n                var cells = document.querySelectorAll(\".field-cell\");\n                for(var row = 0; row < state.length; row++)for(var col = 0; col < state[row].length; col++){\n                    var index = row * this.size + col;\n                    var cell = cells[index];\n                    var value = state[row][col];\n                    cell.textContent = value === 0 ? \"\" : value;\n                    cell.className = \"field-cell\";\n                    if (value > 0) cell.classList.add(\"field-cell--\".concat(value));\n                    else cell.className = \"field-cell\";\n                }\n            }\n        },\n        {\n            key: \"updateScore\",\n            value: function updateScore() {\n                var scoreEl = document.querySelector(\".game-score\");\n                scoreEl.textContent = this.score;\n            }\n        },\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                var board = [];\n                for(var i = 0; i < this.size; i++)board.push([\n                    0,\n                    0,\n                    0,\n                    0\n                ]);\n                return board;\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCell = [];\n                for(var row = 0; row < this.size; row++){\n                    for(var col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCell.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCell.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCell.length);\n                    var _emptyCell_randomIndex = emptyCell[randomIndex], row1 = _emptyCell_randomIndex.row, col1 = _emptyCell_randomIndex.col;\n                    var newTile = Math.random() < 0.9 ? 2 : 4;\n                    this.board[row1][col1] = newTile;\n                }\n            }\n        },\n        {\n            key: \"boardsAreEqual\",\n            value: function boardsAreEqual(board1, board2) {\n                for(var row = 0; row < board1.length; row++)for(var col = 0; col < board1[row].length; col++){\n                    if (board1[row][col] !== board2[row][col]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"checkWin\",\n            value: function checkWin() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.board[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var row = _step.value;\n                        var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                        try {\n                            for(var _iterator1 = row[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                                var cell = _step1.value;\n                                if (cell === 2048) {\n                                    this.status = \"win\";\n                                    this.winMessage();\n                                    return;\n                                }\n                            }\n                        } catch (err) {\n                            _didIteratorError1 = true;\n                            _iteratorError1 = err;\n                        } finally{\n                            try {\n                                if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                                    _iterator1.return();\n                                }\n                            } finally{\n                                if (_didIteratorError1) {\n                                    throw _iteratorError1;\n                                }\n                            }\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"winMessage\",\n            value: function winMessage() {\n                document.querySelector(\".message-win\").classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"checkMove\",\n            value: function checkMove() {\n                for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                    if (this.board[row][col] === 0) return true;\n                    if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) return true;\n                    if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"gameOverMessage\",\n            value: function gameOverMessage() {\n                document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"handleGameOver\",\n            value: function handleGameOver() {\n                if (this.checkMove() === false) {\n                    this.status = \"lose\";\n                    this.gameOverMessage();\n                    return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    if ($197cd56b15c33885$var$startButton.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n    } else if ($197cd56b15c33885$var$startButton.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$game.restart();\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    }\n    $197cd56b15c33885$var$game.renderBoard($197cd56b15c33885$var$game.getState());\n    $197cd56b15c33885$var$game.updateScore($197cd56b15c33885$var$game.getScore());\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n});\n\n})();\n//# sourceMappingURL=index.043bbf3b.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (startButton.classList.contains('start')) {\n    game.start();\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n\n    document.querySelector('.message-start').classList.add('hidden');\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  }\n\n  game.renderBoard(game.getState());\n  game.updateScore(game.getScore());\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.size = 4;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      this.board[row] = this.mergeX(this.board[row]);\n    }\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveRight() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      this.board[row] = this.mergeX(this.board[row], true);\n    }\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveUp() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    this.mergeY(false);\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveDown() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    this.mergeY(true);\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.renderBoard(this.board);\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.status = 'playing';\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  mergeY(reverse = false) {\n    for (let col = 0; col < this.board.length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      if (reverse) {\n        column.reverse();\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] += column[i + 1];\n          this.score += column[i];\n          column[i + 1] = 0;\n          i++;\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      if (reverse) {\n        column.reverse();\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n  }\n\n  mergeX(arr, reverse = false) {\n    let result = reverse ? arr.slice().reverse() : arr.slice();\n\n    result = result.filter((num) => num !== 0);\n\n    for (let i = 0; i < result.length - 1; i++) {\n      if (result[i] === result[i + 1]) {\n        result[i] += result[i + 1];\n        this.score += result[i];\n        result[i + 1] = 0;\n        i++;\n      }\n    }\n\n    result = result.filter((num) => num !== 0);\n\n    while (result.length < this.size) {\n      result.push(0);\n    }\n\n    if (reverse) {\n      result.reverse();\n    }\n\n    return result;\n  }\n\n  renderBoard(state) {\n    const cells = document.querySelectorAll('.field-cell');\n\n    for (let row = 0; row < state.length; row++) {\n      for (let col = 0; col < state[row].length; col++) {\n        const index = row * this.size + col;\n        const cell = cells[index];\n        const value = state[row][col];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n\n        if (value > 0) {\n          cell.classList.add(`field-cell--${value}`);\n        } else {\n          cell.className = 'field-cell';\n        }\n      }\n    }\n  }\n\n  updateScore() {\n    const scoreEl = document.querySelector('.game-score');\n\n    scoreEl.textContent = this.score;\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < this.size; i++) {\n      board.push([0, 0, 0, 0]);\n    }\n\n    return board;\n  }\n\n  addRandomTile() {\n    const emptyCell = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCell.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    if (emptyCell.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCell.length);\n      const { row, col } = emptyCell[randomIndex];\n      const newTile = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = newTile;\n    }\n  }\n\n  boardsAreEqual(board1, board2) {\n    for (let row = 0; row < board1.length; row++) {\n      for (let col = 0; col < board1[row].length; col++) {\n        if (board1[row][col] !== board2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkWin() {\n    for (const row of this.board) {\n      for (const cell of row) {\n        if (cell === 2048) {\n          this.status = 'win';\n          this.winMessage();\n\n          return;\n        }\n      }\n    }\n  }\n\n  winMessage() {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n\n  checkMove() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (\n          col < this.board[row].length - 1\n          && this.board[row][col] === this.board[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < this.board.length - 1\n          && this.board[row][col] === this.board[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  gameOverMessage() {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n\n  handleGameOver() {\n    if (this.checkMove() === false) {\n      this.status = 'lose';\n      this.gameOverMessage();\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","$197cd56b15c33885$var$startButton","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","board","size","status","score","key","value","oldBoard","map","row","slice","handleGameOver","mergeX","boardsAreEqual","addRandomTile","updateScore","renderBoard","checkWin","mergeY","_this","reverse","col","_loop","column","push","filter","num","i","row1","arr","result","state","cells","document","querySelectorAll","cell","textContent","className","classList","add","concat","scoreEl","querySelector","emptyCell","randomIndex","Math","floor","random","_emptyCell_randomIndex","col1","newTile","board1","board2","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","winMessage","err","return","remove","checkMove","gameOverMessage","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","addEventListener","e","preventDefault","contains","start","restart","getState","getScore","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.043bbf3b.js.map"}