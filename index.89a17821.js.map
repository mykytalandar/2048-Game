{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = null){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.size = 4;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        const oldBoard = this.board.map((row)=>row.slice());\n        if (this.handleGameOver()) return;\n        for(let row = 0; row < this.board.length; row++)this.board[row] = this.mergeX(this.board[row]);\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard(this.board);\n        this.checkWin();\n    }\n    moveRight() {\n        const oldBoard = this.board.map((row)=>row.slice());\n        if (this.handleGameOver()) return;\n        for(let row = 0; row < this.board.length; row++)this.board[row] = this.mergeX(this.board[row], true);\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard(this.board);\n        this.checkWin();\n    }\n    moveUp() {\n        const oldBoard = this.board.map((row)=>row.slice());\n        if (this.handleGameOver()) return;\n        this.mergeY(false);\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard(this.board);\n        this.checkWin();\n    }\n    moveDown() {\n        const oldBoard = this.board.map((row)=>row.slice());\n        if (this.handleGameOver()) return;\n        this.mergeY(true);\n        if (!this.boardsAreEqual(oldBoard, this.board)) this.addRandomTile();\n        this.updateScore();\n        this.renderBoard(this.board);\n        this.checkWin();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.renderBoard(this.board);\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.status = \"playing\";\n        this.score = 0;\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    mergeY(reverse = false) {\n        for(let col = 0; col < this.board.length; col++){\n            let column = [];\n            for(let row = 0; row < this.board.length; row++)column.push(this.board[row][col]);\n            if (reverse) column.reverse();\n            column = column.filter((num)=>num !== 0);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] += column[i + 1];\n                this.score += column[i];\n                column[i + 1] = 0;\n                i++;\n            }\n            column = column.filter((num)=>num !== 0);\n            while(column.length < this.size)column.push(0);\n            if (reverse) column.reverse();\n            for(let row = 0; row < this.size; row++)this.board[row][col] = column[row];\n        }\n    }\n    mergeX(arr, reverse = false) {\n        let result = reverse ? arr.slice().reverse() : arr.slice();\n        result = result.filter((num)=>num !== 0);\n        for(let i = 0; i < result.length - 1; i++)if (result[i] === result[i + 1]) {\n            result[i] += result[i + 1];\n            this.score += result[i];\n            result[i + 1] = 0;\n            i++;\n        }\n        result = result.filter((num)=>num !== 0);\n        while(result.length < this.size)result.push(0);\n        if (reverse) result.reverse();\n        return result;\n    }\n    renderBoard(state) {\n        const cells = document.querySelectorAll(\".field-cell\");\n        for(let row = 0; row < state.length; row++)for(let col = 0; col < state[row].length; col++){\n            const index = row * this.size + col;\n            const cell = cells[index];\n            const value = state[row][col];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value > 0) cell.classList.add(`field-cell--${value}`);\n            else cell.className = \"field-cell\";\n        }\n    }\n    updateScore() {\n        const scoreEl = document.querySelector(\".game-score\");\n        scoreEl.textContent = this.score;\n    }\n    createEmptyBoard() {\n        const board = [];\n        for(let i = 0; i < this.size; i++)board.push([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return board;\n    }\n    addRandomTile() {\n        const emptyCell = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCell.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCell.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCell.length);\n            const { row: row, col: col } = emptyCell[randomIndex];\n            const newTile = Math.random() < 0.9 ? 2 : 4;\n            this.board[row][col] = newTile;\n        }\n    }\n    boardsAreEqual(board1, board2) {\n        for(let row = 0; row < board1.length; row++)for(let col = 0; col < board1[row].length; col++){\n            if (board1[row][col] !== board2[row][col]) return false;\n        }\n        return true;\n    }\n    checkWin() {\n        for (const row of this.board){\n            for (const cell of row)if (cell === 2048) {\n                this.status = \"win\";\n                this.winMessage();\n                return;\n            }\n        }\n    }\n    winMessage() {\n        document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    }\n    checkMove() {\n        for(let row = 0; row < this.board.length; row++)for(let col = 0; col < this.board[row].length; col++){\n            if (this.board[row][col] === 0) return true;\n            if (col < this.board[row].length - 1 && this.board[row][col] === this.board[row][col + 1]) return true;\n            if (row < this.board.length - 1 && this.board[row][col] === this.board[row + 1][col]) return true;\n        }\n        return false;\n    }\n    gameOverMessage() {\n        document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    }\n    handleGameOver() {\n        if (this.checkMove() === false) {\n            this.status = \"lose\";\n            this.gameOverMessage();\n            return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n        document.querySelector(\".message-start\").classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        document.querySelector(\".message-win\").classList.add(\"hidden\");\n        document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$game.renderBoard($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$game.getScore());\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n});\n\n\n//# sourceMappingURL=index.89a17821.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  if (startButton.classList.contains('start')) {\n    game.start();\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n\n    document.querySelector('.message-start').classList.add('hidden');\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n\n    document.querySelector('.message-win').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  }\n\n  game.renderBoard(game.getState());\n  game.updateScore(game.getScore());\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState = null) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.size = 4;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      this.board[row] = this.mergeX(this.board[row]);\n    }\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveRight() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      this.board[row] = this.mergeX(this.board[row], true);\n    }\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveUp() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    this.mergeY(false);\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  moveDown() {\n    const oldBoard = this.board.map((row) => row.slice());\n\n    if (this.handleGameOver()) {\n      return;\n    }\n\n    this.mergeY(true);\n\n    if (!this.boardsAreEqual(oldBoard, this.board)) {\n      this.addRandomTile();\n    }\n\n    this.updateScore();\n    this.renderBoard(this.board);\n\n    this.checkWin();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.renderBoard(this.board);\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.status = 'playing';\n    this.score = 0;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  mergeY(reverse = false) {\n    for (let col = 0; col < this.board.length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      if (reverse) {\n        column.reverse();\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] += column[i + 1];\n          this.score += column[i];\n          column[i + 1] = 0;\n          i++;\n        }\n      }\n\n      column = column.filter((num) => num !== 0);\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      if (reverse) {\n        column.reverse();\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        this.board[row][col] = column[row];\n      }\n    }\n  }\n\n  mergeX(arr, reverse = false) {\n    let result = reverse ? arr.slice().reverse() : arr.slice();\n\n    result = result.filter((num) => num !== 0);\n\n    for (let i = 0; i < result.length - 1; i++) {\n      if (result[i] === result[i + 1]) {\n        result[i] += result[i + 1];\n        this.score += result[i];\n        result[i + 1] = 0;\n        i++;\n      }\n    }\n\n    result = result.filter((num) => num !== 0);\n\n    while (result.length < this.size) {\n      result.push(0);\n    }\n\n    if (reverse) {\n      result.reverse();\n    }\n\n    return result;\n  }\n\n  renderBoard(state) {\n    const cells = document.querySelectorAll('.field-cell');\n\n    for (let row = 0; row < state.length; row++) {\n      for (let col = 0; col < state[row].length; col++) {\n        const index = row * this.size + col;\n        const cell = cells[index];\n        const value = state[row][col];\n\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n\n        if (value > 0) {\n          cell.classList.add(`field-cell--${value}`);\n        } else {\n          cell.className = 'field-cell';\n        }\n      }\n    }\n  }\n\n  updateScore() {\n    const scoreEl = document.querySelector('.game-score');\n\n    scoreEl.textContent = this.score;\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < this.size; i++) {\n      board.push([0, 0, 0, 0]);\n    }\n\n    return board;\n  }\n\n  addRandomTile() {\n    const emptyCell = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCell.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    if (emptyCell.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCell.length);\n      const { row, col } = emptyCell[randomIndex];\n      const newTile = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = newTile;\n    }\n  }\n\n  boardsAreEqual(board1, board2) {\n    for (let row = 0; row < board1.length; row++) {\n      for (let col = 0; col < board1[row].length; col++) {\n        if (board1[row][col] !== board2[row][col]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkWin() {\n    for (const row of this.board) {\n      for (const cell of row) {\n        if (cell === 2048) {\n          this.status = 'win';\n          this.winMessage();\n\n          return;\n        }\n      }\n    }\n  }\n\n  winMessage() {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n\n  checkMove() {\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (\n          col < this.board[row].length - 1\n          && this.board[row][col] === this.board[row][col + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          row < this.board.length - 1\n          && this.board[row][col] === this.board[row + 1][col]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  gameOverMessage() {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n\n  handleGameOver() {\n    if (this.checkMove() === false) {\n      this.status = 'lose';\n      this.gameOverMessage();\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","size","status","score","moveLeft","oldBoard","map","row","slice","handleGameOver","length","mergeX","boardsAreEqual","addRandomTile","updateScore","renderBoard","checkWin","moveRight","moveUp","mergeY","moveDown","getScore","getState","getStatus","start","restart","reverse","col","column","push","filter","num","i","arr","result","state","cells","document","querySelectorAll","cell","value","textContent","className","classList","add","scoreEl","querySelector","createEmptyBoard","emptyCell","randomIndex","Math","floor","random","newTile","board1","board2","winMessage","remove","checkMove","gameOverMessage","$09e991522ca7e64e$var$startButton","addEventListener","e","preventDefault","contains","key"],"version":3,"file":"index.89a17821.js.map"}